" used this vimrc at mail.ru

" set fileformat=unix 

" ============================================================================
" $ git config --global core.autocrlf input
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'   " plugin manager PluginInstall PluginClean
Plugin 'szw/vim-tags'           " tags TagsGenerate 
Plugin 'https://github.com/xolox/vim-misc'
Plugin 'xolox/vim-colorscheme-switcher' 
Plugin 'flazz/vim-colorschemes'
" Plugin 'https://github.com/Valloric/YouCompleteMe'  " autocomplete
" Plugin 'http://github.com/octol/vim-cpp-enhanced-highlight'
" Plugin 'sheerun/vim-polyglot'
call vundle#end()            " required
filetype plugin indent on    " required

" ============================================================================

" type 'ctags -R .' in $HOME
" type <C-]> to jump forward, <C-t> to jump back
set tags+=~/tags
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8

" set number            " Show line numbers
set linebreak           " Break lines at word (requires Wrap lines)
set showbreak=+++       " Wrap-broken line prefix
set textwidth=100       " Line wrap (number of cols)
set showmatch           " Highlight matching brace
set incsearch           " Searches for strings incrementally
set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive
set autoindent          " Auto-indent new lines
set cindent
set expandtab           " Use spaces instead of tabs
set shiftwidth=4        " Number of auto-indent spaces
set smartindent         " Enable smart-indent
set smarttab            " Enable smart-tabs
set softtabstop=4       " Number of spaces per Tab
set ruler               " Show row and column ruler information
set undolevels=1000     " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.

nnoremap <C-L> :nohlsearch<CR>
map <F6> :tabp<CR>
map <F7> :tabn<CR>
set pastetoggle=<F2>

" set foldmethod=syntax
"below : fold/unfold
nnoremap <S-Right> zO
nnoremap <S-Left> zC
inoremap <S-Right> <C-O>zO
inoremap <S-Left> <C-O>zC
""below: fold/unfold all
" nnoremap <C-S-Up> zM
" nnoremap <C-S-Down> zR
" inoremap <C-S-Up> <C-O>zM
" inoremap <C-S-Down> <c-O>zR

" now stuff from https://gist.github.com/rocarvaj/2513367

" clever comments
set comments=sl:/*,mb:\ *,elx:\ */
" in normal mode F2 will save the file
nmap <F2> :w<CR>
" in insert mode F2 will exit insert, save, enters insert again
imap <F2> <ESC>:w<CR>i
" switch between header/source with F4
map <F4> :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>

" play around with colors
colorscheme molokai
" colorscheme molokai_dark
" colorscheme mopkai
" colorscheme grishin
" colorscheme leo
" colorscheme miko
" colorscheme monochrome
" colorscheme adventurous
" colorscheme spurs_away
" colorscheme warriors-away
" colorscheme sky
" colorscheme mojave
" elrond
" holokai
" duna
" valloric
" meta5
" sunburst
" blackboard
" detailed
" harlequin
" sunburst
" argonaut
" neonwave
" lumberjack
" gotham
" less
" ingretu
" colorscheme clearance
" colorscheme synic
" colorscheme ubloh
"

" crappy shit about std autocompletion, doesnt work with boost, dont install if you dont want
filetype plugin on    
set nocp
" Install OmniCppComplete like described on http://vim.wikia.com/wiki/C++_code_completion
" This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
" Load standard tag files
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/gl
" set tags+=~/.vim/tags/sdl
" set tags+=~/.vim/tags/qt4
" recreate tags file with F5
map <F5> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
